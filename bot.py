import telebot
import os
from dotenv import load_dotenv
import requests
import json
from telebot import types
from loguru import logger

load_dotenv()
TOKEN = os.getenv('TELEGRAM_TOKEN')
bot = telebot.TeleBot(TOKEN)

FAV_FILE = 'favorites.json'  # —Ñ–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ –∏ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤

logger.add('bot.log', rotation='1 MB') # –õ–æ–≥ —Ñ–∞–π–ª

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ

def load_favs():
    try:
        with open(FAV_FILE, 'r') as f:
            return json.load(f)
    except Exception:
        return {}

def save_favs(data):
    with open(FAV_FILE, 'w') as f:
        json.dump(data, f)

searching_users = set()

@bot.message_handler(func=lambda message: message.text and message.text.lower() == '–ø—Ä–∏–≤–µ—Ç')
def greet_user(message):
    bot.reply_to(message, '–ü—Ä–∏–≤–µ—Ç')

@bot.message_handler(commands=['start'])
def start(message):
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(types.KeyboardButton('üîé –ü–æ–∏—Å–∫ —Ä–µ—Ü–µ–ø—Ç–∞'), types.KeyboardButton('‚≠ê –ò–∑–±—Ä–∞–Ω–Ω–æ–µ'))
    bot.send_message(message.chat.id, '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=kb)

@bot.message_handler(func=lambda m: m.text == 'üîé –ü–æ–∏—Å–∫ —Ä–µ—Ü–µ–ø—Ç–∞')
def ask_for_recipe(message):
    searching_users.add(message.from_user.id)
    bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä: pasta')

@bot.message_handler(func=lambda message: message.from_user.id in searching_users and message.text)
def get_search_text(message):
    searching_users.discard(message.from_user.id)
    title = message.text.strip()
    if not title:
        bot.reply_to(message, '–ù–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º')
        return
    try:
        url = f'https://www.themealdb.com/api/json/v1/1/search.php?s={title}'
        resp = requests.get(url, timeout=10)
        resp.raise_for_status()
        data = resp.json()
        meals = data.get('meals')
        if not meals:
            bot.reply_to(message, '–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ')
            return
        meals = meals[:5] # –º–∞–∫—Å–∏–º—É–º 5 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        for meal in meals:
            kb = types.InlineKeyboardMarkup()
            kb.add(types.InlineKeyboardButton('–ü–æ–¥—Ä–æ–±–Ω–µ–µ', callback_data=f"desc_{meal['idMeal']}"))
            caption = meal['strMeal'][:1024]
            bot.send_photo(message.chat.id, meal['strMealThumb'], caption=caption, reply_markup=kb)
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∏—â–µ—Ç '{title}', –Ω–∞–π–¥–µ–Ω–æ {len(meals)} –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.")
    except Exception as e:
        logger.exception(e)
        bot.reply_to(message, '–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Ä–µ—Ü–µ–ø—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.')

@bot.callback_query_handler(func=lambda call: call.data.startswith('desc_'))
def show_meal_details(call):
    meal_id = call.data.split('_')[1]
    meal = get_meal_by_id(meal_id)
    if meal:
        send_meal(call.message.chat.id, meal)
        bot.answer_callback_query(call.id)
    else:
        bot.answer_callback_query(call.id, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ—Ü–µ–ø—Ç–∞!')

@bot.message_handler(func=lambda m: m.text == '‚≠ê –ò–∑–±—Ä–∞–Ω–Ω–æ–µ')
def fav_button(message):
    show_favs(message)

# –ü–æ–∏—Å–∫ —Ä–µ—Ü–µ–ø—Ç–∞
@bot.message_handler(commands=['–Ω–∞–π—Ç–∏'])
def find_recipe(message):
    try:
        title = message.text.partition(' ')[2]
        if not title:
            bot.reply_to(message, '–ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞ –ø–æ—Å–ª–µ /–Ω–∞–π—Ç–∏')
            return
        url = f'https://www.themealdb.com/api/json/v1/1/search.php?s={title}'
        resp = requests.get(url, timeout=10)
        resp.raise_for_status()
        data = resp.json()
        meals = data.get('meals')
        if not meals:
            bot.reply_to(message, '–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ')
            return
        for meal in meals[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º 5 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            send_meal(message.chat.id, meal)
        send_meal(message.chat.id, meal)
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∏—â–µ—Ç '{title}', –Ω–∞–π–¥–µ–Ω–æ {meal['strMeal']}")
    except Exception as e:
        logger.exception(e)
        bot.reply_to(message, '–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Ä–µ—Ü–µ–ø—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.')

# –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ—Ü–µ–ø—Ç–∞, —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏, –≤–∏–¥–µ–æ

def send_meal(chat_id, meal):
    try:
        caption = f"<b>{meal['strMeal']}</b>"
        # –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–ª–∏–Ω–Ω—É—é –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º, —á—Ç–æ–±—ã –Ω–µ –≤–æ–∑–Ω–∏–∫–∞–ª–æ –æ—à–∏–±–∫–∏
        kb = types.InlineKeyboardMarkup()
        kb.add(types.InlineKeyboardButton('üåü –í –∏–∑–±—Ä–∞–Ω–Ω–æ–µ', callback_data=f"fav_{meal['idMeal']}"))
        bot.send_photo(chat_id, meal['strMealThumb'], caption=caption[:1024], parse_mode='HTML', reply_markup=kb)
        if meal.get('strInstructions'):
            bot.send_message(chat_id, meal['strInstructions'])
        if meal.get('strYoutube'):
            bot.send_message(chat_id, f"–í–∏–¥–µ–æ: {meal['strYoutube']}")
        rate_kb = types.InlineKeyboardMarkup(row_width=5)
        rate_kb.add(*[types.InlineKeyboardButton(f'{i} ‚≠ê', callback_data=f"rate_{meal['idMeal']}_{i}") for i in range(1,6)])
        bot.send_message(chat_id, '–ü–æ—Å—Ç–∞–≤—å—Ç–µ –æ—Ü–µ–Ω–∫—É —Ä–µ—Ü–µ–ø—Ç—É:', reply_markup=rate_kb)
    except Exception as e:
        logger.exception(e)
        bot.send_message(chat_id, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Ä–µ—Ü–µ–ø—Ç–∞.')

def send_menu(chat_id):
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(types.KeyboardButton('üîé –ü–æ–∏—Å–∫ —Ä–µ—Ü–µ–ø—Ç–∞'), types.KeyboardButton('‚≠ê –ò–∑–±—Ä–∞–Ω–Ω–æ–µ'))
    bot.send_message(chat_id, '–ú–µ–Ω—é:', reply_markup=kb)

@bot.callback_query_handler(func=lambda call: call.data.startswith('fav_'))
def add_fav(call):
    try:
        meal_id = call.data.split('_')[1]
        user_id = str(call.from_user.id)
        favs = load_favs()
        user_favs = favs.get(user_id, {})
        if meal_id not in user_favs:
            user_favs[meal_id] = {'rating': 0}
            favs[user_id] = user_favs
            save_favs(favs)
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –¥–æ–±–∞–≤–∏–ª {meal_id} –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ")
        bot.answer_callback_query(call.id, '–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ!')
        send_menu(call.message.chat.id)
    except Exception as e:
        logger.exception(e)
        bot.answer_callback_query(call.id, '–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ')
        send_menu(call.message.chat.id)

@bot.callback_query_handler(func=lambda call: call.data.startswith('rate_'))
def rate_meal(call):
    try:
        _, meal_id, stars = call.data.split('_')
        user_id = str(call.from_user.id)
        favs = load_favs()
        user_favs = favs.get(user_id, {})
        if meal_id in user_favs:
            user_favs[meal_id]['rating'] = int(stars)
            bot.answer_callback_query(call.id, f'–í–∞—à–∞ –æ—Ü–µ–Ω–∫–∞: {stars} ‚≠ê')
        else:
            user_favs[meal_id] = {'rating': int(stars)}
            bot.answer_callback_query(call.id, '–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ –∏ –æ—Ü–µ–Ω–µ–Ω–æ!')
        favs[user_id] = user_favs
        save_favs(favs)
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ—Å—Ç–∞–≤–∏–ª {stars}‚≠ê —Ä–µ—Ü–µ–ø—Ç—É {meal_id}")
        send_menu(call.message.chat.id)
    except Exception as e:
        logger.exception(e)
        bot.answer_callback_query(call.id, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ –æ—Ü–µ–Ω–∫–∏')
        send_menu(call.message.chat.id)

# –ü–æ–∫–∞–∑–∞—Ç—å –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
@bot.message_handler(commands=['–∏–∑–±—Ä–∞–Ω–Ω–æ–µ'])
def show_favs(message):
    try:
        user_id = str(message.from_user.id)
        favs = load_favs()
        user_favs = favs.get(user_id, {})
        if not user_favs:
            bot.send_message(message.chat.id, '–£ –≤–∞—Å –Ω–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Ä–µ—Ü–µ–ø—Ç–æ–≤.')
            return
        favs_sorted = sorted(user_favs.items(), key=lambda x: x[1]['rating'], reverse=True)
        kb = types.InlineKeyboardMarkup()
        for meal_id, data in favs_sorted:
            meal = get_meal_by_id(meal_id)
            if not meal:
                continue
            btn_text = f"{meal['strMeal']} ‚Äî {data['rating']} ‚≠ê"
            kb.add(types.InlineKeyboardButton(btn_text, callback_data=f"favshow_{meal_id}"))
        bot.send_message(message.chat.id, '–í–∞—à–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã:', reply_markup=kb)
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª –∏–∑–±—Ä–∞–Ω–Ω–æ–µ")
    except Exception as e:
        logger.exception(e)
        bot.send_message(message.chat.id, '–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Ä–µ—Ü–µ–ø—Ç–æ–≤')

@bot.callback_query_handler(func=lambda call: call.data.startswith('favshow_'))
def show_fav_details(call):
    meal_id = call.data.split('_')[1]
    meal = get_meal_by_id(meal_id)
    if meal:
        send_meal(call.message.chat.id, meal)
        bot.answer_callback_query(call.id)
    else:
        bot.answer_callback_query(call.id, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ—Ü–µ–ø—Ç–∞!')

def get_meal_by_id(meal_id):
    try:
        resp = requests.get(f'https://www.themealdb.com/api/json/v1/1/lookup.php?i={meal_id}', timeout=10)
        resp.raise_for_status()
        meals = resp.json().get('meals')
        return meals[0] if meals else None
    except Exception as e:
        logger.error(f'–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ—Ü–µ–ø—Ç–∞ {meal_id}: {e}')
        return None

if __name__ == '__main__':
    print('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...')
    bot.infinity_polling()
